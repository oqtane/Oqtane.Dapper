@using Oqtane.Modules.Controls
@using MyCompany.Module.Dapper.Services
@using MyCompany.Module.Dapper.Models

@namespace MyCompany.Module.Dapper
@inherits ModuleBase
@inject IClientService ClientService
@inject NavigationManager NavigationManager

<form @ref="form" class="@(validated ? " was-validated" : "needs-validation" )" novalidate>
    <div class="container">
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="name" HelpText="Enter a name" ResourceKey="Name">Name: </Label>
            <div class="col-sm-9">
                <input id="name" class="form-control" @bind="@_name" required />
            </div>
        </div>
    </div> 
    <button type="button" class="btn btn-success" @onclick="Save">Save</button>
    <NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
    <br /><br /> 
    @if (PageState.Action == "Edit") 
    {
    <AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>
    }
</form>

@code {
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    public override string Title => "Manage Client";

    private ElementReference form;
    private bool validated = false;

    private int _id;
    private string _name;
    private string _createdby;
    private DateTime _createdon;
    private string _modifiedby;
    private DateTime _modifiedon;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.Action == "Edit")
            {
                _id = Int32.Parse(PageState.QueryString["id"]);
                Models.Client Client = await ClientService.GetClientAsync(_id);
                if (Client != null)
                {
                    _name = Client.Name;
                    _createdby = Client.CreatedBy;
                    _createdon = Client.CreatedOn;
                    _modifiedby = Client.ModifiedBy;
                    _modifiedon = Client.ModifiedOn;
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Client {ClientId} {Error}", _id, ex.Message);
            AddModuleMessage("Error Loading Client", MessageType.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            validated = true;
            var interop = new Oqtane.UI.Interop(JSRuntime);
            if (await interop.FormValid(form))
            {
                if (PageState.Action == "Add")
                {
                    Models.Client Client = new Models.Client();
                    Client.Name = _name;
                    Client = await ClientService.AddClientAsync(Client);
                    await logger.LogInformation("Client Added {Client}", Client);
                }
                else
                {
                    Models.Client Client = await ClientService.GetClientAsync(_id);
                    Client.Name = _name;
                    await ClientService.UpdateClientAsync(Client);
                    await logger.LogInformation("Client Updated {Client}", Client);
                }
                NavigationManager.NavigateTo(NavigateUrl());
            }
            else
            {
                AddModuleMessage("Please Enter All Required Fields", MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Client {Error}", ex.Message);
            AddModuleMessage("Error Saving Client", MessageType.Error);
        }
    }
}
